// 데이터 불변성 (Immutability)
// 원시 데이터 : String, Number, Booleam, undefined, null
// ----------------------------------------------------
// |1:           |2:           |3:           |4:
// ----------------------------------------------------
// 참조형 데이터 : Object, Array, Function
// ----------------------------------------------------
// |1: {       } |2: {       } |3: {       } |4: {       }
// ----------------------------------------------------


// 원시 데이터 : 불변성을 가졌다.
// a는 1번 메모리 주소, b는 2번 메모리 주소, c는 3번 메모리 주소
let a = 1 // 1번 메모리 주소
let b = 4 // 2번 메모리 주소
console.log(a, b, a === b)  // a가 바라보는 메모리 주소와 b가 바라보는 메모리 주소가 서로 다르기 때문에 false
b = a // 1번 메모리 주소
console.log(a, b, a === b)  // a의 주소를 b의 주소로 바라보게 바꾼 것이므로 서로 바라보는 주소가 같아서 true
a = 7 // 3번 메모리 주소
console.log(a, b, a === b)
let c = 1 // 1번 메모리 주소, 새로운 원시데이터가 기존의 메모리 주소에 들어있다면 새롭게 만들지 않고 기존의 메모리 주소를 바라보게 된다. 이를 불변성이라 한다.
console.log(b, c, b === c)


// 참조형 데이터 : 가변성을 가졌다.
// 만들 때 마다 새로운 주소를 가지게 된다
// 얕은 복사(겉의 표면), 깊은 복사(내부의 모든 참조관계까지 새로운 메모리로 복시)를 이용해서 사용 해야한다.
let d = { k:1 } // 1번 메모리 주소
let e = { k:1 } // 2번 메모리 주소
console.log(d, e, d === e) // false
d.k = 7 // 1번 메모리 주소
e = d   // 2번 메모리 주소 -> 1번 메모리 주소
console.log(d, e, d === e) // ture
d.k = 2 // 1번 메모리 주소
console.log(d, e, d === e) // ture : 의도치 않게 e도 값이 바뀜, 서로 같은 메모리 주소를 가지고 있기 때문
let f = e // f도 1번 메모리 주소
console.log(d, e, f, d === f) // true
d.k = 9 // 변수 e, f도 d가 보고있는 1번 메모리 주소를 보고 있기 때문에 모두 같은 값이 된다.
console.log(d, e, f, d === f) // true


